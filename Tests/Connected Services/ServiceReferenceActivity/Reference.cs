//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Tests.ServiceReferenceActivity {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReferenceActivity.IActivity")]
    public interface IActivity {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IActivity/UpdateuserStatus", ReplyAction="http://tempuri.org/IActivity/UpdateuserStatusResponse")]
        bool UpdateuserStatus(string status, int idUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IActivity/UpdateuserStatus", ReplyAction="http://tempuri.org/IActivity/UpdateuserStatusResponse")]
        System.Threading.Tasks.Task<bool> UpdateuserStatusAsync(string status, int idUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IActivity/SessionDurationStart", ReplyAction="http://tempuri.org/IActivity/SessionDurationStartResponse")]
        bool SessionDurationStart(int idUser, System.DateTime whenStart);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IActivity/SessionDurationStart", ReplyAction="http://tempuri.org/IActivity/SessionDurationStartResponse")]
        System.Threading.Tasks.Task<bool> SessionDurationStartAsync(int idUser, System.DateTime whenStart);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IActivity/SessionDurationStop", ReplyAction="http://tempuri.org/IActivity/SessionDurationStopResponse")]
        bool SessionDurationStop(System.DateTime whenStarted, int idUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IActivity/SessionDurationStop", ReplyAction="http://tempuri.org/IActivity/SessionDurationStopResponse")]
        System.Threading.Tasks.Task<bool> SessionDurationStopAsync(System.DateTime whenStarted, int idUser);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IActivityChannel : Tests.ServiceReferenceActivity.IActivity, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ActivityClient : System.ServiceModel.ClientBase<Tests.ServiceReferenceActivity.IActivity>, Tests.ServiceReferenceActivity.IActivity {
        
        public ActivityClient() {
        }
        
        public ActivityClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ActivityClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ActivityClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ActivityClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool UpdateuserStatus(string status, int idUser) {
            return base.Channel.UpdateuserStatus(status, idUser);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateuserStatusAsync(string status, int idUser) {
            return base.Channel.UpdateuserStatusAsync(status, idUser);
        }
        
        public bool SessionDurationStart(int idUser, System.DateTime whenStart) {
            return base.Channel.SessionDurationStart(idUser, whenStart);
        }
        
        public System.Threading.Tasks.Task<bool> SessionDurationStartAsync(int idUser, System.DateTime whenStart) {
            return base.Channel.SessionDurationStartAsync(idUser, whenStart);
        }
        
        public bool SessionDurationStop(System.DateTime whenStarted, int idUser) {
            return base.Channel.SessionDurationStop(whenStarted, idUser);
        }
        
        public System.Threading.Tasks.Task<bool> SessionDurationStopAsync(System.DateTime whenStarted, int idUser) {
            return base.Channel.SessionDurationStopAsync(whenStarted, idUser);
        }
    }
}
